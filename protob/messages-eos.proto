syntax = "proto2";
package hw.trezor.messages.eos;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageEos";

/**
 * Request: Ask device for Eos address corresponding to address_n path
 * @start
 * @next EosAddress
 * @next Failure
 */
message EosGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node 44'/194'/0'
    optional bool show_display = 2; // optionally show on display before sending the result
}

/**
 * Response: Contains an Eos address derived from device private seed
 * @end
 */
 message EosAddress {
    required string address = 1;     // EOS address in Base58 encoding
}

/**
 * Request: Ask device to sign transaction
 * All fields are optional from the protocol's point of view. Each field defaults to value `0` if missing.
 * Note: the first at most 1024 bytes of data MUST be transmitted as part of this message.
 * @start
 * @next EosTxRequest
 * @next Failure
 */
 message EosSignTx {
    repeated uint32 address_n = 1;                // BIP-32 path to derive the key from master node 44'/194'/0'
    optional bytes chain_id = 2;                  // 256-bit long chain id
    optional EosTxHeader header = 3;              // Eos transaction header
    optional bytes data_initial_chunk = 4;        // The initial data chunk (<= 1024 bytes)
    optional uint32 data_length = 5;              // Length of transaction payload
    
    /**
    * Structure representing EOS transaction header
    */
    message EosTxHeader {
        optional uint32 expiration = 1;           // time at which transaction expires
        optional uint32 ref_block_num = 2;        // 16-bit specifies a block num in the last 2^16 blocks.
        optional uint32 ref_block_prefix = 3;     // specifies the lower 32 bits of the blockid at get_ref_blocknum
        optional uint32 max_net_usage_words = 4;  // upper limit on total network bandwidth (in 8 byte words) billed for this transaction
        optional uint32 max_cpu_usage_ms = 5;     // 8-bit upper limit on the total CPU time billed for this transaction
        optional uint32 delay_sec = 6;            // number of seconds to delay this transaction for during which it may be canceled.
    }
}

/**
 * Response: Device asks for more data from transaction payload, or returns the signature.
 * If data_length is set, device awaits that many more bytes of payload.
 * Otherwise, the signature_* fields contain the computed transaction signature. All three fields will be present.
 * @end
 * @next EosTxAck
 */
message EosTxRequest {
    optional uint32 data_length = 1;    // Number of bytes being requested (<= 1024)
    optional uint32 signature_v = 2;    // Computed signature (recovery parameter, limited to 31 or 32)
    optional bytes signature_r = 3;     // Computed signature R component (256 bit)
    optional bytes signature_s = 4;     // Computed signature S component (256 bit)
}

/**
 * Request: Transaction payload data.
 * @next EosTxRequest
 */
 message EosTxAck {
    optional bytes data_chunk = 1;  // Bytes from transaction payload (<= 1024 bytes)
}